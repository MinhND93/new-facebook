{"version":3,"sources":["components/Login/Login.js","actions/index.js","containers/Login.js","components/Nav/Nav.js","components/Friend/Friend.js","components/Friend/FriendList.js","containers/Friend.js","components/Thread/Thread.js","components/Thread/ThreadList.js","containers/Thread.js","containers/Chat.js","components/App/AuthenticatedRoute.js","components/App/App.js","serviceWorker.js","reducers/message.js","reducers/thread.js","reducers/user.js","reducers/login.js","reducers/index.js","helper/mock.js","index.js"],"names":["Login","_ref","userList","onClick","react_default","a","createElement","className","border","map","user","key","id","width","align","userName","nextMessageId","withRouter","connect","state","dispatch","ownProps","type","payload","login","localStorage","setItem","JSON","stringify","history","push","Nav","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","moveToPage","bind","assertThisInitialized","page","window","location","href","_this2","role","Component","Friend","avatar","mutual","address","src","alt","FriendList","friendList","moveToChat","components_Nav_Nav","friend","components_Friend_Friend","assign","currentUser","currentUserIndex","indexOf","find","splice","Thread","image","content","ThreadList","threadList","thread","components_Thread_Thread","ChatComponent","fetchData","_this$props","message","onKeyPress","targetUser","mes","from","$event","placeholder","currentUrl","pathname","split","targetUserId","parseInt","length","filter","to","storeMessages","parse","getItem","event","which","preventDefault","target","value","createDate","Date","objectSpread","sendMessage","AuthenticatedRoute","component","rest","objectWithoutProperties","Route","render","Redirect","createBrowserHistory","App","Router","path","AuthenticatedRoute_AuthenticatedRoute","exact","Boolean","hostname","match","arguments","undefined","action","currentMessage","concat","toConsumableArray","messages","data","forEach","element","combineReducers","MOCK_STATE","i","email","initUsers","ownerId","Math","floor","random","initThreads","store","createStore","rootReducer","getState","entries","_ref2","slicedToArray","removeItem","rootElement","document","getElementById","ReactDOM","es","components_App_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a62abb06.chunk.js","sourcesContent":["import React from 'react'\nimport './Login.css'\nimport PropTypes from 'prop-types'\n\nconst Login = ({ userList, onClick }) => (\n    <div className=\"row\">\n        <div className=\"col-sm-9 col-md-7 col-lg-5 mx-auto\">\n            <div className=\"card card-signin my-5\">\n                <div className=\"card-title text-center\">\n                    Click on the User to Login\n                </div>\n                <div className=\"card-body\">\n                    <table className=\"table-users table\" border=\"0\">\n                        <tbody>\n                            {\n                                userList.map(user => {\n                                    return (<tr key={user.id} onClick={() => onClick(user)}>\n                                        <td width=\"10\" align=\"center\">\n                                            <i className=\"fa fa-2x fa-user fw\"></i>\n                                        </td>\n                                        <td>\n                                            {user.userName}\n                                        </td>\n                                    </tr>)\n                                })\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n);\n\nLogin.propTypes = {\n    userList: PropTypes.array.isRequired,\n    onClick: PropTypes.func.isRequired\n}\n\nexport default Login","let nextMessageId = 1\nexport const sendMessage = message => ({\n  type: 'SEND_MESSAGE',\n  id: nextMessageId++,\n  ...message\n})\n\nexport const loadMessage = messages => ({\n  type: 'LOAD_MESSAGE',\n  payload: messages\n})\n\nexport const login = user => ({\n  type: 'LOGIN',\n  payload: user\n})\n\n","import { connect } from 'react-redux'\nimport Login from '../components/Login/Login'\nimport { login } from '../actions/index'\nimport { withRouter } from 'react-router-dom'\n\nconst mapStateToProps = state => ({\n    userList: state.user.userList\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    onClick: (user) => {\n        dispatch(login(user));\n        localStorage.setItem('user', JSON.stringify(user));\n        ownProps.history.push('/');\n    }\n\n})\n\nexport default withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Login))\n","import React, { Component } from 'react'\nimport './Nav.css'\n\nclass Nav extends Component {\n    constructor(props) {\n        super(props);\n        this.moveToPage = this.moveToPage.bind(this);\n    }\n    /**\n     * Navigation\n     * @param {*} page \n     */\n    moveToPage(page) {\n        if (page !== '/login') {\n            this.props.history.push(page);\n        } else {\n            //Reload page\n            window.location.href = page\n        }\n    }\n    render() {\n        return (<div className=\"row\">\n            <div className=\"col-sm-12\">\n                <nav>\n                    <div className=\"nav nav-tabs nav-fill\" id=\"nav-tab\" role=\"tablist\">\n                        <button className=\"nav-item nav-link\" id=\"nav-thread-tab\" onClick={() => this.moveToPage('/')} >Threads</button>\n                        <button className=\"nav-item nav-link\" id=\"nav-friend-tab\" onClick={() => this.moveToPage('/friend')} >Friends</button>\n                        <button className=\"nav-item nav-link\" id=\"nav-logout-tab\" onClick={() => this.moveToPage('/login')}>Logout</button>\n                    </div>\n                </nav>\n            </div>\n        </div>\n        );\n    }\n};\n\nexport default Nav","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Friend.css'\n\nconst Friend = ({ id, userName, avatar, mutual, address, onClick }) => (\n    <div className=\"media\" onClick={onClick}>\n        <img className=\"d-flex align-self-start\" src={avatar} alt=\"avartar\" />\n        <div className=\"media-body pl-3\">\n            <div className=\"name\">{userName}</div>\n            <div className=\"mutual\">\n                <span><i className=\"fa fa-user\"></i>{mutual} mutual friends</span>\n            </div>\n            <div className=\"address\">{address}</div>\n        </div>\n    </div>\n)\n\nFriend.propTypes = {\n    onClick: PropTypes.func.isRequired,\n    userName: PropTypes.string.isRequired,\n    avatar: PropTypes.string.isRequired,\n    mutual: PropTypes.number.isRequired,\n    address: PropTypes.string.isRequired\n}\n\nexport default Friend\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Nav from '../Nav/Nav'\nimport Friend from './Friend'\n\nconst FriendList = ({ friendList, moveToChat, history }) => {\n    return (\n        <div>\n            <Nav history={history}/>\n            <div className=\"row\">\n                <div className='col-md-12 listing-block'>\n                    {\n                        friendList.map(friend =>\n                            <Friend\n                                key={friend.id}\n                                {...friend}\n                                onClick = {() => moveToChat(friend)}\n                            />\n                        )\n                    }\n                </div>\n            </div>\n        </div>\n    );\n};\n\nFriendList.propTypes = {\n    friendList: PropTypes.array,\n    moveToChat: PropTypes.func\n}\n\nexport default FriendList","import { connect } from 'react-redux'\nimport FriendList from '../components/Friend/FriendList'\nimport { withRouter } from 'react-router-dom'\n\n\nconst mapStateToProps = state => {\n  let userList = Object.assign({}, state.user).userList;\n  let currentUser = state.login;\n  let currentUserIndex = state.user.userList.indexOf(state.user.userList.find(user => user.id === currentUser.id));\n  if (currentUserIndex !== -1) {\n    userList.splice(currentUserIndex, 1);\n  }\n  return {\n    friendList: userList\n  };\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  moveToChat: (friend) => {\n    ownProps.history.push('/message/' + friend.id);\n  }\n})\n\nexport default withRouter(connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FriendList))\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Thread.css'\n\nconst Thread = ({ image, content }) => (\n    <div className=\"row thread-item\">\n        <div className='col-md-12'>\n            <div className=\"card\">\n                <img className=\"card-img-top\" src={image} alt=\"cover\" />\n                <div className=\"card-body\">\n                    <p className=\"card-text\">{content}</p>\n                </div>\n                <div className=\"card-footer\">\n                    <button className=\"btn btn-danger\">Like</button>\n                    <button className=\"btn btn-primary float-right\">Share</button>\n                </div>\n            </div>\n        </div>\n    </div>\n)\n\nThread.propTypes = {\n    image: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired\n}\n\nexport default Thread\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Nav from '../Nav/Nav'\nimport Thread from './Thread'\n\nconst ThreadList = ({ threadList, history }) => {\n    return (\n        <div>\n            <Nav history={history}/>\n            {\n                threadList.map((thread) =>\n                    <Thread\n                        key={thread.id}\n                        {...thread}\n                    />\n                )\n            }\n        </div>\n    );\n};\n\nThreadList.propTypes = {\n    threadList: PropTypes.array\n}\n\nexport default ThreadList","import { connect } from 'react-redux'\nimport ThreadList from '../components/Thread/ThreadList'\nimport { withRouter } from 'react-router-dom'\n\nconst mapStateToProps = state => {\n  return {\n    threadList: state.thread.threadList\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default withRouter(connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ThreadList))\n","import { connect } from 'react-redux'\nimport { sendMessage, loadMessage } from '../actions'\nimport React, { Component } from 'react'\nimport '../components/Chat/Chat.css'\nimport Nav from '../components/Nav/Nav'\nimport { withRouter } from 'react-router-dom'\n\nclass ChatComponent extends Component {\n  componentWillMount() {\n    const { fetchData } = this.props\n    fetchData();\n  }\n\n  render() {\n    const { message, onKeyPress, currentUser, targetUser } = this.props\n    return (\n      <div>\n        <Nav history={this.props.history} />\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <div className=\"panel panel-primary\">\n              <div className=\"panel-title\">\n                {'Conversation with ' + targetUser.userName}\n              </div>\n              <div className=\"panel-body\">\n                {\n                  message.map(mes =>\n                    <div key={mes.id} className=\"clearfix message\">\n                      <blockquote className={mes.from === currentUser.id ? \"me pull-right\" : \"you pull-left\"}>{mes.content}\n                      </blockquote>\n                    </div>\n                  )\n                }\n              </div>\n              <div className=\"panel-footer\">\n                <div className=\"input-group\">\n                  <div className=\"input-group-append\">\n                    <span className=\"input-group-text left_btn\"></span>\n                  </div>\n                  <textarea onKeyPress={($event) => onKeyPress($event, currentUser)} className=\"form-control type_msg\" placeholder=\"Press enter to send\"></textarea>\n                  <div className=\"input-group-append\">\n                    <span onClick={() => this.props.fetchData()} className=\"input-group-text reload_btn\">Get Latest Messages</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\n\nconst mapStateToProps = (state, ownProps) => {\n  const currentUser = state.login;\n  const currentUrl = ownProps.history.location.pathname.split('/');\n  const targetUserId = parseInt(currentUrl[currentUrl.length - 1], 10);\n  return {\n    message: state.message.filter(mes => (mes.from === currentUser.id && mes.to === targetUserId) || (mes.from === targetUserId && mes.to === currentUser.id)),\n    currentUser: currentUser,\n    targetUser: state.user.userList.find(user => user.id === targetUserId)\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  fetchData: () => {\n    let storeMessages = JSON.parse(localStorage.getItem('initMessage')) ? JSON.parse(localStorage.getItem('initMessage')) : [];\n    dispatch(loadMessage(storeMessages));\n  },\n  onKeyPress: (event, currentUser) => {\n    //Check if Enter key is pressed\n    if (event.which === 13) {\n      event.preventDefault();\n      const currentUrl = ownProps.history.location.pathname.split('/');\n      const targetUserId = currentUrl[currentUrl.length - 1];\n      let message = {\n        from: currentUser.id,\n        to: parseInt(targetUserId, 10),\n        content: event.target.value,\n        createDate: new Date()\n      }\n      dispatch(sendMessage(message));\n      event.target.value = '';\n    }\n  }\n})\n\nexport default withRouter(connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ChatComponent))\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\n\nexport const AuthenticatedRoute = ({ component: Component, login, ...rest }) => (\n    <Route {...rest} render={props => (\n        //Check login state\n        localStorage.getItem('user')\n            ? <Component {...props} />\n            : <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\n    )} />\n)\n\n","import React from 'react'\nimport Login from '../../containers/Login'\nimport Friend from '../../containers/Friend'\nimport Thread from '../../containers/Thread'\nimport ChatComponent from '../../containers/Chat'\nimport { AuthenticatedRoute } from './AuthenticatedRoute'\nimport { Router, Route } from 'react-router-dom';\n\nimport { createBrowserHistory } from 'history';\nconst history = createBrowserHistory();\n\nconst App = () => (\n  <div className=\"container-fluid\">\n    <Router history={history}>\n      <div>\n        <Route path=\"/login\" component={Login} />\n        <AuthenticatedRoute exact path=\"/\" component={Thread} />\n        <AuthenticatedRoute path=\"/friend\" component={Friend} />\n        <AuthenticatedRoute path=\"/message/:userId\" component={ChatComponent} />\n      </div>\n    </Router>\n  </div>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const message = (state = [], action) => {\n    switch (action.type) {\n        case 'SEND_MESSAGE':\n            //check to get latest id from storage\n            if (localStorage.getItem('initMessage')) {\n                let currentMessage = JSON.parse(localStorage.getItem('initMessage'));\n                currentMessage.push({\n                    id: currentMessage[currentMessage.length - 1].id + 1,\n                    from: action.from,\n                    to: action.to,\n                    content: action.content,\n                    createDate: action.createDate\n                });\n                localStorage.setItem('initMessage', JSON.stringify(currentMessage));\n                return [\n                    ...state,\n                    {\n                        id: currentMessage[currentMessage.length - 1].id,\n                        from: action.from,\n                        to: action.to,\n                        content: action.content,\n                        createDate: action.createDate\n                    }\n                ]\n            } else {\n                let messages = [];\n                messages.push({\n                    id: action.id,\n                    from: action.from,\n                    to: action.to,\n                    content: action.content,\n                    createDate: action.createDate\n                });\n                localStorage.setItem('initMessage', JSON.stringify(messages))\n                return [\n                    ...state,\n                    {\n                        id: action.id,\n                        from: action.from,\n                        to: action.to,\n                        content: action.content,\n                        createDate: action.createDate\n                    }\n                ]\n            }\n        case 'LOAD_MESSAGE':\n            let data = [];\n            action.payload.forEach(element => {\n                data = [\n                    ...data,\n                    element\n                ]\n            });\n            return data\n        default:\n            return state\n    }\n}\n\nexport default message","const thread = (state = [], action) => {\n    switch (action.type) {\n        default:\n            return state\n    }\n}\n\nexport default thread","const user = (state = [], action) => {\n    switch (action.type) {\n        default:\n            return state\n    }\n}\n\nexport default user","const login = (state = {}, action) => {\n    switch (action.type) {\n        case 'LOGIN':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default login","import { combineReducers } from 'redux'\nimport message from './message'\nimport thread from './thread'\nimport user from './user'\nimport login from './login'\n\nexport default combineReducers({\n    message,\n    thread,\n    user,\n    login\n})\n","export const MOCK_STATE = {\n    user: {\n        userList: initUsers()\n    },\n    thread: {\n        threadList: initThreads()\n    }\n}\n\nfunction initUsers() {\n    let userList = [];\n\n    for (let i = 1; i < 10; i++) {\n        userList.push({\n            id: i,\n            userName: 'User ' + i,\n            email: 'minhnd081293@gmail.com',\n            avatar: 'https://i2.wp.com/xansan.com/wp-content/uploads/2018/10/user-avatar-default-2609.png?ssl=1',\n            mutual: 8,\n            address: 'Stockholm, Sweden'\n        });\n    };\n    return userList;\n}\n\nfunction initThreads() {\n    let threadList = [];\n    for (let i = 1; i < 20; i++) {\n        threadList.push({\n            id: i,\n            content: `Lorem ipsum dolor sit amet, qui duis quando constituam cu, no sea alia graeci voluptatibus. Eius omnes vivendum ad his, \n            cu pro vidit error mandamus, stet fugit dissentias duo id. Wisi delectus cu mea, cu prima quaestio per, salutatus argumentum et nec. \n            This is sample thread ` + i,\n            image: (i % 2) === 0 ?\n                'http://4.bp.blogspot.com/-xE5C0WBGh4o/Tp5WWmdO3fI/AAAAAAAAAEA/G08pmkhrWhM/s1600/beatiful+water+fall+with+green+trees+and+river.jpg' :\n                'https://media-cdn.tripadvisor.com/media/photo-s/0c/ea/20/78/beatiful-bali-island.jpg',\n            ownerId: Math.floor(Math.random() * 6) + 1,\n            createDate: new Date()\n        });\n    };\n\n    return threadList;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'font-awesome/css/font-awesome.min.css'\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './reducers'\nimport { MOCK_STATE } from './helper/mock'\n\nconst store = createStore(rootReducer)\nconst state = store.getState()\nObject.entries(MOCK_STATE).forEach(\n    ([key, value]) => (state[key] = { ...value, ...MOCK_STATE[key] })\n)\nlocalStorage.removeItem('user'); \nconst rootElement = document.getElementById('root')\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    rootElement\n)\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}